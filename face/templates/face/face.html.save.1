{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% block head %}
<link rel="stylesheet" href="/static/clock/clock.css">
<script src="/static/face/ccv.js" type="text/javascript"></script>
<script src="/static/face/face.js" type="text/javascript"></script>
<style>
.spin-loader {
  border: 18px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 70px;
  height: 70px;
  animation: spin 4s linear infinite;
}
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>
{% endblock %}
{% block content %}
<div class="container w-100">
{% if request.path == '/photobooth/'  %}
{% include 'set_content.html' %}
{% endif  %}
<form method="POST" enctype="multipart/form-data" id="face-login-form" style="position: absolute; display: none; visibility: hidden;">
{% csrf_token %}
{{ form|crispy }}
</form>
<video autoplay="true" muted="true" id="video" width="100%"></video>
<img id="passkey" class="hide" width="100%"></img>
<hr>
<div>
{% with profile as content %}
<div style="display: flex; justify-content: space-around;">
<p style="display: inline-block;">Center your face on the screen and tap or click the video. Last seen {{ profile.last_seen }}</p>
<div style="text-align: right;">{% include 'clock.html' %}</div>
</div>
{% endwith %}
</div>
<canvas id="canvas" style="position: absolute; display: none; visibility: hidden;"></canvas>
</div>
<div style="position: fixed; left: 0; top: 0; background-color: transparent; height: 0px; width: 100%" id="loader-container">
<div id="spin-loader" style="position: relative; margin: auto; top: 50%; text-align: center;"></div>
</div>
<div class="container">
<div style="position: fixed; left: 0; top: 0; background-color: #FFFFFF; height: 0px; width: 100%" id="flash"></div>
</div>
{% endblock %}
{% block javascript %}
var supported = false;
var REQ_FACE_HEIGHT = 30;
var image;
var imageCapture;
var form = document.getElementById('face-login-form');
var flash = document.getElementById('flash');
var mediaRecorder;
var mediaChunks = [];
var video = document.getElementById('video');
var passkey = document.getElementById('passkey');
var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');
var scale = 1;
var faces;
video.addEventListener("click", function(event) {
	$(document.getElementById("clemn-navbar")).autoHidingNavbar().hide();
	window.scrollBy(0,200);
        flash.style.height = '100%';
	setTimeout(function() {
		onTakePhotoButtonClick();
	}, {{ photo_timeout }});
});

function onTakePhotoButtonClick() {
  if(supported){
    imageCapture.takePhoto()
    .then((blob) => createImageBitmap(blob))
    .then((imageBitmap) => {
          image = imageBitmap;
          uploadImage(image);
    })
    .catch((error) => console.error(error));
  } else {
    uploadImage(video);
  }
}

var degmod = 90;
function drawRotated(degrees, image, fallback){
    context.clearRect(0, 0, canvas.width, canvas.height);
    var mode = Math.floor(degrees/90) % 2 == 0;
    var mode2 = false;
    if(!fallback){
        mode2 = image.width > image.height;
      if(mode) {
        canvas.width = image.height * scale;
       canvas.height = image.width * scale;
       } else {
        canvas.width = image.width * scale;
       canvas.height = image.height * scale;
	}
    } else {
        mode2 = image.videoWidth > image.videoHeight;
    if(mode) {
        canvas.width = image.videoWidth * scale;
        canvas.height = image.videoHeight * scale;
    } else {
        canvas.width = image.videoHeight * scale;
        canvas.height = image.videoWidth * scale;
    }
    }
    context.clearRect(0, 0, canvas.width, canvas.height);
    if(fallback) {
	degrees = degrees * 90;
    }
    if (degrees >= 0) {
        context.translate(canvas.width / 2, canvas.height / 2);   // to center
        context.rotate(degrees * Math.PI / 180);                   // rotate
    }
//    if(!mode) {
//        context.drawImage(image, -canvas.height / 2, -canvas.width / 2, canvas.height, canvas.width); // and back
//    } else {
        context.drawImage(image, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height); // and back
//    }
        context.translate(-canvas.width / 2, -canvas.height / 2); // and back
    context.restore();
    context.save();
}


function uploadImage(image){
	setTimeout(function() {
		$('body').toggleClass('loaded');
	}, 12000);
        video.pause();
	document.getElementById("spin-loader").classList.add("spin-loader");
	document.getElementById("loader-container").style.height = "100vh";
	var rotation_attempts = [0, 270, 90, 180, 0]; //, 270, 180, 90];
	var face = false;
	if(supported){
		for(rot in rotation_attempts) {
			drawRotated(rot, image, false);
			var faces = ccv.detect_objects({
			  "canvas" : ccv.pre(canvas),
			  "cascade": cascade,
			  "interval": 2,
			  "min_neighbors": 1
			});
			if(!(faces.length > 1 || faces.length < 1)) {
				var height = faces[0].height;
				console.log(height);
				if(height > REQ_FACE_HEIGHT){
					face = true;
					break;
				}
			}
		}
	}
	if(!face) {
		for(rot in rotation_attempts) {
			drawRotated(rot, video, true);
			var faces = ccv.detect_objects({
			  "canvas" : ccv.pre(canvas),
			  "cascade": cascade,
			  "interval": 2,
			  "min_neighbors": 1
			});
			if(!(faces.length > 1 || faces.length < 1)) {
				var height = faces[0].height;
				console.log(height);
				if(height > REQ_FACE_HEIGHT){
					face = true;
					break;
				}
			}
		}
	}
	if(!face) {
		window.location.reload();
        }
	passkey.src = canvas.toDataURL();
	$(passkey).toggleClass('hide');
	$(video).toggleClass('hide');
	var blobBin = atob(canvas.toDataURL().split(',')[1]);
        flash.style.height = '0px';
        var array = [];
        for(var i = 0; i < blobBin.length; i++) {
           array.push(blobBin.charCodeAt(i));
        }
        var file=new Blob([new Uint8Array(array)], {type: 'image/png'});
        var formdata = new FormData(form);
        formdata.append('image', new File([file], 'image.png'));
        $.ajax({
           url: window.location.href,
           type: "POST",
           data: formdata,
           processData: false,
           contentType: false,
           success: function(data, textStatus) {
                console.log(data);
           },
           timeout: 1000 * 60 * 5,
        }).done(function(respond){
		{% if not request.path == '/photobooth/' %}
                if(respond.startsWith("/accounts/tfa/") || respond.startsWith("/recovery/")){
                  window.location.href = respond;
                } else {
                  window.location.reload();
                }
		{% else %}
		   window.location.href = window.location.pathname;
		{% endif %}
        });
}


const clone = (items) => items.map(item => Array.isArray(item) ? clone(item) : item);
function startup() {
  navigator.mediaDevices.getUserMedia({video: true, audio: false})
  .then(function(stream) {
    video.srcObject = stream;
    video.play();
    const track = stream.getVideoTracks()[0];
    imageCapture = new ImageCapture(track);
    return imageCapture.getPhotoCapabilities();
  }).then((photoCapabilities) => {
    const settings = imageCapture.track.getSettings();
    input.min = photoCapabilities.imageWidth.min;
    input.max = photoCapabilities.imageWidth.max;
    input.step = photoCapabilities.imageWidth.step;
    if(input && input.min > 0){
        supported = true;
    }
  }).catch(function(err) {
    console.log("An error occurred: " + err);
    supported = false;
  });
}
startup();
{% endblock %}

